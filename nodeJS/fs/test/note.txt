首先需要引入fs模块
const fs = require('fs');
1.fs.stat 检测是文件还是目录

fs.stat('./package.json', (err, data) => {
    if (err) {
        console.log(err);
        return;
    }
    console.log(`文件:${data.isFile()}`)
    console.log(`目录:${data.isDirectory()}`)
})
2.fs.mkdir 创建目录

fs.mkdir('./css', (err) => {
    if (err) {
        console.log(err)
        return
    }
    console.log("创建成功")
})
3.fs.writeFile 创建写入文件

fs.writeFile('./html/index.html', 'hello', (err) => {
    if (err) {
        console.log(err)
        return
    }
    console.log("创建写入文件成功")
})
4. fs.appendFile 追加文件

fs.appendFile('./css/base.css', 'h2{color:red}', (err) => {
    if (err) {
        console.log(err)
        return
    }
    console.log("追加文件成功")
})
5. fs.readFile读取文件

fs.readFile('./html/index.html', (err, data) => {
    if (err) {
        console.log(err)
        return
    }
    console.log(data.toString())
})
6. fs.readdir读取目录

fs.readdir('./html', (err, data) => {
    if (err) {
        console.log(err)
        return
    }
    console.log(data)
})
7. fs.rename 重命名、移动文件

fs.rename('./css/base.css', './css/index.css', (err) => {
    if (err) {
        console.log(err)
        return
    }
    console.log("重命名成功")
})
fs.rename('./css/index.css', './html/app.html', (err) => {
    if (err) {
        console.log(err)
        return
    }
    console.log("移动文件成功")
})
8. fs.rmdir 删除目录，目录文件必须为空

fs.rmdir('./css', (err) => {
    if (err) {
        console.log(err)
        return
    }
    console.log("删除目录成功")
})
9. fs.unlink 删除文件

fs.unlink('./html/app.html', (err) => {
    if (err) {
        console.log(err)
        return
    }
    console.log("删除文件成功")
})